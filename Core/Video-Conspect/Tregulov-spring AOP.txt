AOP - Aspect Orienting Programing
Парадигма программирования основанная на разделении основного и служебного функционала. Служебный функционал записывается в Aspect классы. 
Служебный функционал называют сквозной логикой, а основной функционал бизнес-логикой. Пример сквозной логики - авторизация, логгирование, работа с транзакциями
Паттерн проектирования для реализации такого подхода называется Proxy
При проксировании создается отдельный класс(AOP Proxt) который обеспечивает работу c основным классом и добавляет логику Аспект классов.
Вместо 
Основной класс <-> Вызывающий код
Используется
Основной класс <-> AOP Proxy <-> Вызывающий код

Плюсы AOP
1) Сквозной функционал сосредоточен в одном или небольшом количестве Аспект-классов и его легко изменять
2) Легче добавть новые сквозные работы для основного кода или добавить имеющиеся сквозные работы к новым классам
3) Бизнес-код избавляется от сквозного кода, работать с ним становится проще
Минус AOP
Небольшое замедление при работе AOP Proxy

Спринг по-умолчанию использует AOP, он встроен в фреймворк. Существует отдельный от спринга фреймворк AspectJ более сложный и мощный.

